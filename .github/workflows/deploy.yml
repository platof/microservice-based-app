name: Update Deployment with ArgoCD

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'

jobs:
  build_and_push_frontend:
    name: Build and Push frontend Docker Image to AWS ECR
    runs-on: ubuntu-latest
    if: github.event_path == 'frontend/Dockerfile' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'   

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          FE_ECR_REPOSITORY: ${{ secrets.FE_REPO_NAME }}
          IMAGE_TAG: ${{ steps.version.outputs.value }}
        run: |
          docker build -t $ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile .
          
      - name: Push Docker image to ECR
        run: docker push $ECR_REGISTRY/$FE_ECR_REPOSITORY:$IMAGE_TAG

  build_and_push_backend:
    name: Build and Push backend Docker Image to ECR
    runs-on: ubuntu-latest
    if: github.event_path == 'backend/Dockerfile'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version package.json -r'

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BE_ECR_REPOSITORY: ${{ secrets.BE_REPO_NAME }}
          IMAGE_TAG: ${{ steps.version.outputs.value }}
        run: |
          docker build -t $ECR_REGISTRY/$BE_ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile .

      - name: Push Docker image to ECR
        run: docker push $ECR_REGISTRY/$BE_ECR_REPOSITORY:$IMAGE_TAG

  
